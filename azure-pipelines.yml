pool:
  vmImage: "ubuntu-latest"

trigger:
  branches:
    include:
      - main
      - dev
      - "refs/tags/*"

resources:
  - repo: self

variables:
  - group: pypi-credentials
  - group: safety-config

stages:
  - stage: LintAndSecurity
    jobs:
      - job: SecretsScan
        displayName: Trufflehog - Secret Detection
        container: python:3.13
        steps:
          - script: |
              pip install --user trufflehog
              export PATH="$HOME/.local/bin:$PATH"
              trufflehog --regex --entropy=False $(Build.SourcesDirectory)
            displayName: Run TruffleHog for secrets scanning
      - job: PylintCheck
        displayName: Pylint - Python Lint
        container: python:3.13
        steps:
          - script: |
              pip install pylint
              export PATH="$HOME/.local/bin:$PATH"
              pylint --fail-under=7 $(Build.SourcesDirectory)/**/*.py
            displayName: Pylint for Code Quality
      - job: BanditCheck
        displayName: Bandit - Python Security Linting
        container: python:3.13
        steps:
          - script: |
              pip install bandit
              export PATH="$HOME/.local/bin:$PATH"
              bandit -lll -r .
            displayName: Bandit for Code Security
      # - job: SafetyCheck
      #   displayName: Safety - Python Dependencies Check
      #   container: python:3.13
      #   steps:
      #     - script: |
      #         pip install safety poetry
      #         export PATH="$HOME/.local/bin:$PATH"
      #         poetry export -f requirements.txt --output requirements.txt
      #         safety --stage production --key $(SAFETY_API_KEY) scan
      #       displayName: Safety for Dependency Security

  # - stage: Testing
  #   dependsOn: LintAndSecurity
  #   jobs:
  #     - job: PytestRun
  #       displayName: Pytest - Python Unit Testing
  #       container: python:3.13
  #       steps:
  #         - script: |
  #             pip install poetry pytest
  #             export PATH="$HOME/.local/bin:$PATH"
  #             poetry install
  #             poetry run pytest tests/
  #           displayName: Run Pytest for unit testing

  - stage: Publish
    dependsOn: LintAndSecurity
    jobs:
      - job: PublishOpen
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: Publish to PyPI
        container: python:3.13
        steps:
          - script: |
              pip install poetry
              export PATH="$HOME/.local/bin:$PATH"
              sed -i "s/0.0.0-dev/$(Build.SourceBranchName)/g" pyproject.toml
              sed -i "s/0.0.0-dev/$(Build.SourceBranchName)/g" qalita_core/utils.py
              poetry build  # Construire le paquet
              poetry publish --username $(PYPI_PUBLISH_USER) --password $(PYPI_PUBLISH_PASSWORD) --skip-existing  # Publier sur PyPI
            displayName: Publish Package to PyPI
